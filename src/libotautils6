###
# Logging/Progressbar handling for OTA update scripts
# Based on libotautils5 from NiLuJe
# Written by HackerDude
#
# (The 5 meant K5 not version 5 didn't it...)
# Notable Changes
# - Use an enum for models
# - Remove dependency on eips (being deprecated in favour for eips_v2, might as well use fbink in case it happens again)
#
##

###
# Variables
###
HOTFIX_VERSION="v2.1.2"
KMC_PERSISTENT_STORAGE="/var/local/kmc"
MKK_PERSISTENT_STORAGE="/var/local/mkk"
KMC_BACKUP_STORAGE="/mnt/us/kmc"
MKK_BACKUP_STORAGE="/mnt/us/mkk"
RP_BACKUP_STORAGE="/mnt/us/rp"
ARCH="armel"
# Check if the Kindle is ARMHF or ARMEL
if [ -f /lib/ld-linux-armhf.so.3 ]; then
    ARCH="armhf"
fi

###
# General helpers
###
# Pull some helper functions for logging
_FUNCTIONS=/etc/upstart/functions
[ -f ${_FUNCTIONS} ] && source ${_FUNCTIONS}

# Make sure HACKNAME is set (NOTE: This should be overriden in the update script)
[ -z "${HACKNAME}" ] && HACKNAME="ota_script"

FBINK_BIN="${KMC_PERSISTENT_STORAGE}/${ARCH}/bin/fbink"



# Adapt the K5 logging calls to the simpler legacy syntax
_LOGMSG_Y=2
logmsg()
{
	f_log "${1}" "${HACKNAME}" "${2}" "${3}" "${4}"
	# Add our own echo, like on legacy devices (useful for MRPI logging, since f_log's one is sent to /dev/console)
	if [ "${1}" != "D" ] ; then
		echo "system: ${1} ${HACKNAME}:${2}:${3}:${4}"
	fi
	if [ -f "$FBINK_BIN" ]; then
		${FBINK_BIN} -x 1 -y $_LOGMSG_Y -r -S 3 "${1}: ${4}"
	fi
	_LOGMSG_Y=$(($_LOGMSG_Y + 1))
}



###
# Progressbar stuff
###
# Some constants...
_BLANKET="com.lab126.blanket"
_OTAMODULE="${_BLANKET}.ota"

# Check if blanket is running
if pkill -0 blanket ; then
	BLANKET_IS_UP="true"
else
	BLANKET_IS_UP="false"
fi

# Send progress to blanket, or print it manually otherwise
otautils_update_progress_indicator()
{
	local cur_percentage="${1}"

	if [ "${BLANKET_IS_UP}" == "true" ] ; then
		lipc-send-event ${_OTAMODULE} otaSplashProgress -i ${cur_percentage}
	else
		# NOTE: We can actually draw a progress bar with FBInk!
        ${FBINK_BIN} -qP ${cur_percentage} -y $(( -6 ))
	fi
}


# Check if arg is an int
is_integer()
{
	# Cheap trick ;)
	[ "${1}" -eq "${1}" ] 2>/dev/null
	return $?
}

# The amount of steps needed to fill the progress bar
# I'm lazy, so just count the amount of calls in the script itself ;)
# NOTE: Yup, $0 still points to the original script that sourced us :).
[ -z ${STEPCOUNT} ] && STEPCOUNT="$(grep -c '^[[:blank:]]*otautils_update_progressbar$' ${0} 2>/dev/null)"
# Make sure it's sane...
is_integer "${STEPCOUNT}" || STEPCOUNT=1
# NOTE: If you need to for some strange reason, this can be overriden in the update script

# In case we need to catch failure early...
otautils_die()
{
	local error_string="${1}"

	if [ "${BLANKET_IS_UP}" == "true" ] ; then
		lipc-send-event ${_OTAMODULE} otaSplashError -s "${error_string}"
	else
		${FBINK_BIN} -qpmh -y -3 -S 6 "Error: ${error_string}"
	fi
	if [ $? -eq 0 ] ; then
		logmsg "D" "guierror" "" "display error screen: ${error_string}"
	else
		logmsg "W" "guierror" "status=fail" "display error screen: ${error_string}"
	fi

	# And it is called die, after all ;)
	sleep 5
	exit 1
}

# Fill up our progress bar, one step at a time
# Keep track of what we're doing...
_CUR_STEP=0
_CUR_PERCENTAGE=0
otautils_update_progressbar()
{
	# One more step...
	_CUR_STEP=$((_CUR_STEP + 1))
	# Bounds checking...
	if [ ${_CUR_STEP} -lt 0 ] ; then
		_CUR_STEP=0
	elif [ ${_CUR_STEP} -gt ${STEPCOUNT} ] ; then
		_CUR_STEP=${STEPCOUNT}
	fi

	# Make that a percentage
	local bar_percentage=$(( (${_CUR_STEP} * 100) / ${STEPCOUNT} ))
	# We can only *fill* the bar...
	if [ ${_CUR_PERCENTAGE} -lt ${bar_percentage} ] ; then
		_CUR_PERCENTAGE=${bar_percentage}
	fi

	# Make sure that percentage is sane...
	is_integer "${_CUR_PERCENTAGE}" || _CUR_PERCENTAGE=0
	# Bounds checking...
	if [ ${_CUR_PERCENTAGE} -gt 100 ] ; then
		_CUR_PERCENTAGE=100
	elif [ ${_CUR_PERCENTAGE} -lt 0 ] ; then
		_CUR_PERCENTAGE=0
	fi

	# Finally, refresh the bar
	otautils_update_progress_indicator "${_CUR_PERCENTAGE}"
	if [ $? -eq 0 ] ; then
		logmsg "D" "guiprogress" "progress=${_CUR_PERCENTAGE}" "update progress indicator"
	else
		logmsg "W" "guiprogress" "progress=${_CUR_PERCENTAGE},status=fail" "update progress indicator"
	fi
}

# This may come in handy for bridge related packages...
make_mutable() {
	local my_path="${1}"
	# NOTE: Can't do that on symlinks, hence the hoop-jumping...
	if [ -d "${my_path}" ] ; then
		find "${my_path}" -type d -exec chattr -i '{}' \;
		find "${my_path}" -type f -exec chattr -i '{}' \;
	elif [ -f "${my_path}" ] ; then
		chattr -i "${my_path}"
	fi
}

make_immutable() {
	local my_path="${1}"
	if [ -d "${my_path}" ] ; then
		find "${my_path}" -type d -exec chattr +i '{}' \;
		find "${my_path}" -type f -exec chattr +i '{}' \;
	elif [ -f "${my_path}" ] ; then
		chattr +i "${my_path}"
	fi
}

# That's all, folks ;)